#include <iostream>
#include <iomanip>
#include <fstream>
#include "Wektor.hh"
#include "Macierz.hh"
#include "Prostokat.hh"
#include "opcje.hh"
#include "lacze_do_gnuplota.hh"



using namespace std;

/*
 * Tu definiujemy pozostale funkcje.
 * Lepiej jednak stworzyc dodatkowy modul
 * i tam je umiescic. Ten przyklad pokazuje
 * jedynie absolutne minimum.
 */


#define DL_KROTKI_BOK  100
#define DL_DLUGI_BOK   150





/*!
 * Przyklad zapisu wspolrzednych zbioru punktow do strumienia wyjściowego.
 * Dane sa odpowiednio sformatowane, tzn. przyjęto notację stałoprzecinkową
 * z dokładnością do 10 miejsca po przecinku. Szerokość wyświetlanego pola 
 * to 16 miejsc, sposób wyrównywania - do prawej strony.
 * \param[in] StrmWy - strumien wyjsciowy, do ktorego maja zostac zapisane
 *                     kolejne wspolrzedne.
 * \param[in] Przesuniecie - ten parameter jest tylko po to, aby pokazać
 *                          mozliwosc zmiany wspolrzednych i prostokata
 *                          i zmiane jego polorzenia na okienku graficznym
 *                         rysownym przez gnuplota.
 * \retval true - gdy operacja zapisu powiodła się,
 * \retval false - w przypadku przeciwnym.
 */
void PrzykladZapisuWspolrzednychDoStrumienia( ostream&     StrmWy, 
                                              double       Przesuniecie
                                            )
{
   //---------------------------------------------------------------
   // To tylko przyklad !!!
   // W programie nalezy uzywać pojęcia wektora, a nie oddzielnych 
   // zmiennych do reprezentowania wspolrzednych!
   //
  double  x1, y1, x2, y2, x3, y3, x4, y4; 

  x1 = y1 = 10;
  x2 = x1 + DL_DLUGI_BOK;  y2 = y1;
  x3 = x2;  y3 = y2 + DL_KROTKI_BOK;
  x4 = x3 - DL_DLUGI_BOK; y4 = y3;


  StrmWy << setw(16) << fixed << setprecision(10) << x1+Przesuniecie 
         << setw(16) << fixed << setprecision(10) << y1+Przesuniecie << endl;
  StrmWy << setw(16) << fixed << setprecision(10) << x2+Przesuniecie 
         << setw(16) << fixed << setprecision(10) << y2+Przesuniecie << endl;
  StrmWy << setw(16) << fixed << setprecision(10) << x3+Przesuniecie 
         << setw(16) << fixed << setprecision(10) << y3+Przesuniecie << endl;
  StrmWy << setw(16) << fixed << setprecision(10) << x4+Przesuniecie 
         << setw(16) << fixed << setprecision(10) << y4+Przesuniecie << endl;
  StrmWy << setw(16) << fixed << setprecision(10) << x1+Przesuniecie 
         << setw(16) << fixed << setprecision(10) << y1+Przesuniecie << endl; 
                             // Jeszcze raz zapisujemy pierwszy punkt,
                             // aby gnuplot narysowal zamkniętą linię.
}



/*!
 * Przyklad zapisu wspolrzednych zbioru punktow do pliku, z ktorego
 * dane odczyta program gnuplot i narysuje je w swoim oknie graficznym.
 * \param[in] sNazwaPliku - nazwa pliku, do którego zostana zapisane
 *                          wspolrzędne punktów.
 * \param[in] Przesuniecie - ten parameter jest tylko po to, aby pokazać
 *                          mozliwosc zmiany wspolrzednych i prostokata
 *                          i zmiane jego polorzenia na okienku graficznym
 *                         rysownym przez gnuplota.
 * \retval true - gdy operacja zapisu powiodła się,
 * \retval false - w przypadku przeciwnym.
 */
bool PrzykladZapisuWspolrzednychDoPliku( const char  *sNazwaPliku,
                                         double       Przesuniecie
                                       )
{
  ofstream  StrmPlikowy;

  StrmPlikowy.open(sNazwaPliku);
  if (!StrmPlikowy.is_open())  {
    cerr << ":(  Operacja otwarcia do zapisu \"" << sNazwaPliku << "\"" << endl
	 << ":(  nie powiodla sie." << endl;
    return false;
  }

  PrzykladZapisuWspolrzednychDoStrumienia(StrmPlikowy,Przesuniecie);

  StrmPlikowy.close();
  return !StrmPlikowy.fail();
}

bool ZapisDoPliku( const char  *sNazwaPliku, Prostokat &Pr)
{
  ofstream  StrmPlikowy;

  StrmPlikowy.open(sNazwaPliku);
  if (!StrmPlikowy.is_open())  {
    cerr << ":(  Operacja otwarcia do zapisu \"" << sNazwaPliku << "\"" << endl
	 << ":(  nie powiodla sie." << endl;
    return false;
  }

  wyswietlWspolrzedne(Pr,StrmPlikowy);

  StrmPlikowy.close();
  return !StrmPlikowy.fail();
}



int main()
{
  Wektor x(1,1), w1(10,0), w2(0,5);
  Prostokat P(x,w1,w2);


  
  char                  znak;
  PzG::LaczeDoGNUPlota  Lacze;  // Ta zmienna jest potrzebna do wizualizacji
                                // rysunku prostokata

   //-------------------------------------------------------
   //  Wspolrzedne wierzcholkow beda zapisywane w pliku "prostokat.dat"
   //  Ponizsze metody powoduja, ze dane z pliku beda wizualizowane
   //  na dwa sposoby:
   //   1. Rysowane jako linia ciagl o grubosci 2 piksele
   //
  Lacze.DodajNazwePliku("prostokat.dat",PzG::RR_Ciagly,2);
   //
   //   2. Rysowane jako zbior punktow reprezentowanych przez kwadraty,
   //      których połowa długości boku wynosi 2.
   //
  Lacze.DodajNazwePliku("prostokat.dat",PzG::RR_Punktowy,2);
   //
   //  Ustawienie trybu rysowania 2D, tzn. rysowany zbiór punktów
   //  znajduje się na wspólnej płaszczyźnie. Z tego powodu powoduj
   //  jako wspolrzedne punktow podajemy tylko x,y.
   //
  Lacze.ZmienTrybRys(PzG::TR_2D);
  menu();
  while (znak!='k')
    {
      cout<<"Twój wybór: (m - menu)"<<endl;
      cin>>znak;
      switch (znak) {
      case 'o':
	double kat, razy;
	cout<<"Podaj kat obrotu:"<<endl;
	cin>>kat;
	cout<<"Podaj ilość obrotów:"<<endl;
	cin>>razy;
	obroc(P,kat,razy);
	break;
      case 'p':
	{
	  Wektor Przesuniecie;
	  cout<<"Podaj wektor przesunięcia:"<<endl;
	  cin>>Przesuniecie;
	  przesun(P,Przesuniecie);
	}
	break;
      case 'w':
        cout<<P;
	if (!ZapisDoPliku("prostokat.dat",P)) return 1;
	Lacze.Rysuj(); // <- Tutaj gnuplot rysuje, to co zapisaliśmy do pliku
	break;
      case 's':
	porownaj(P);
	break;
      case 'm':
	menu();
	break;
      case 'k': break;
      case 't':
	{
	  char znak;
	  cout<<"Wywołanie testowe:"<<endl<<"Początkowy prostokąt:"<<endl<<P;
	  porownaj(P);
 
	  if (!ZapisDoPliku("prostokat.dat",P)) return 1;
	  Lacze.Rysuj(); // <- Tutaj gnuplot rysuje, to co zapisaliśmy do pliku
	  cout << "Wprowadz znak i naciśnij ENTER, aby kontynuowac" << endl;
	  cin >> znak;
	  Wektor w(50,100);
	  przesun(P,w);
	  //----------------------------------------------------------
	  // Ponownie wypisuje wspolrzedne i rysuje prostokąt w innym miejscu.
	  //
	  cout<<"Prostokąt przesunięty o wektor "<<w<<" :"<<endl<<P;
	  porownaj(P);
 
	  if (!ZapisDoPliku("prostokat.dat",P)) return 1;
	  Lacze.Rysuj(); // <- Tutaj gnuplot rysuje, to co zapisaliśmy do pliku
	  cout << "Wprowadz znak i naciśnij ENTER, aby kontynuowac" << endl;
	  cin >> znak;
	  obroc(P,90,1);
	  //----------------------------------------------------------
	  // Ponownie wypisuje wspolrzedne i rysuje prostokąt w innym miejscu.
	  //
	  cout<<"Prostokąt obrócony o kąt 90st:"<<endl<<P;
	  porownaj(P);
	  
	  if (!ZapisDoPliku("prostokat.dat",P)) return 1;
	  Lacze.Rysuj(); // <- Tutaj gnuplot rysuje, to co zapisaliśmy do pliku
	  cout << "Wprowadz znak i naciśnij ENTER, aby kontynuowac" << endl;
	  cin >> znak;
	  obroc(P,1,36000000);
	  //----------------------------------------------------------
	  // Ponownie wypisuje wspolrzedne i rysuje prostokąt w innym miejscu.
	  //
	  cout<<"Prostokąt obrócony o kąt 1st 36 000 000 razy:"<<endl<<P;
	  porownaj(P);
	  
	  if (!ZapisDoPliku("prostokat.dat",P)) return 1;
	  Lacze.Rysuj(); // <- Tutaj gnuplot rysuje, to co zapisaliśmy do pliku
	  cout << "Wprowadz znak i naciśnij ENTER, aby kontynuowac" << endl;
	  cin >> znak;
	}
	break;
      default:
	cout<<"Nierozpoznane polecenie"<<endl;
	break;
      }
    }
}
